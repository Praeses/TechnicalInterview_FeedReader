@using FeedReader.Models;

@{
    ViewBag.Title = "ListFeeds";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

@section scripts {
    @Scripts.Render("~/Scripts/DataTables/jquery.dataTables.js")
    @Scripts.Render("https://cdn.datatables.net/scroller/1.4.2/js/dataTables.scroller.js")
    
    
    <script>
        var dTable;
        $(document).ready(function () {
            dTable = $('#feedItemsTable').DataTable({
                serverSide: true,
                fixedColumns: true,
                stateSave: true,
                ordering: false,
                select: true,
                displayBuffer: 100,
                searchDelay: 1000,
                ajax: function(data, callback, settings){
                    $.post("@Url.Action("FeedJson", new { refresh="false" })", data, function(result){
                        callback({
                            draw: data.draw,
                            data: result.data,
                            recordsTotal: result.recordsTotal,
                            recordsFiltered: result.recordsFiltered
                        });
                    }, 'json');
                },
                "columnDefs" : [{
                    targets: 0,
                    width: "10%",
                    data: "wrapper",
                    render: function (data, type, full, meta) {
                        return '<a class="feedLink" href="ViewFeed?feedUrl=' + encodeURIComponent(data.channel.feedUrl) + '">' + data.channel.title + '</a>';
                    }
                },
                {
                    targets: 1,
                    width : "50%",
                    data: "wrapper",
                    render: function (data, type, full, meta) {
                        var extraClasses = '';
                        if (data.read) {
                            debugger;
                            extraClasses += 'readArticle'
                        }
                        return '<span class="' + extraClasses + '"><a class="tableFeedTitleDesc" href="' + data.link + '"><span class="tableFeedTitle">' + data.title + '</span><span class="tableFeedDescription">' + data.description + '</span></a>';
                    }
                },
                {
                    width: "10%",
                    targets: 2,
                    data: "wrapper",
                    render: function (data, type, full, meta) {
                        return "10/1/2016";
                    }
                }],
                scrollX : false,
                scrollY: 400,
                scroller: {
                    loadingIndicator: true
                }
            });

            $('#feedItemsTable tbody').on('click', 'tr', function () {
                var data = dTable.row(this).data();
                
                var rssId = data.wrapper.rssItemId;
                $('#myModal .modal-content').load("ViewFeedItem?feedItemId=" + encodeURIComponent(rssId));
                $('#myModal').modal('show');

                $.get("@Url.Action("UpdateFeedItem", "Rss")?rssItemId=" + encodeURIComponent(rssId));
            });

            @if ((bool)ViewData["refreshFeed"] == true)
            {
                @Html.Raw("updateFeeds()");
            }
            
           
        });

        function updateFeeds() {
            $.post("@Url.Action("UpdateFeeds", "Rss")", function () {
                dTable.row(0).scrollTo();
                dTable.ajax.reload();
            });
        }
    </script>
}

@section css {
    @Styles.Render("https://cdn.datatables.net/scroller/1.4.2/css/scroller.dataTables.bootstrap.min.css");
    @Styles.Render("~/Content/DataTables/css/jquery.dataTables.css")

    <style>
        #feedHolder {
            display: inline-block;
            float: left;
        }
        #feedItemHolder {
            display: block;
        }

        #feedItemsTable td {
            
        }
        #feedItemsTable td{
            white-space: nowrap;
            padding: 0;
            padding-top: 1px;
            padding-bottom: 1px;
            padding-left: 10px;
            margin: 0;
            overflow: hidden; /* this is what fixes the expansion */
            text-overflow: ellipsis; /* not supported in all browsers, but I accepted the tradeoff */
        }

        #feedItemsTable td:nth-child(1){
            max-width: 150px;
            overflow: hidden;
            padding-left: 0;
            text-overflow: ellipsis;
        }

        .dataTables_scrollBody {

        }

        .feedLink {
            color: inherit;
        }

        .tableFeedTitle {
            font-weight: bold;
            margin-right: 10px;
            display: inline-block;
        }

        .tableFeedDescription {
            color: grey;
        }

        .readArticle *{
            color: grey;

        }

        a.tableFeedTitleDesc{
            color: black;
            text-overflow: ellipsis;
            overflow: hidden;
            display: block;
            width: 800px;
        }

        .modal {
          text-align: center;
          padding: 0!important;
          padding: 10px;
        }

        .modal:before {
          content: '';
          display: inline-block;
          height: 100%;
          vertical-align: middle;
          margin-right: -4px;
        }

        .modal-dialog {
          display: inline-block;
          text-align: left;
          vertical-align: middle;
        }
    </style>
}

<h2>ListFeeds</h2>

<div id="feedHolder">
@*@foreach (RssChannel channel in (List<RssChannel>)ViewData["feeds"])
{
    <a href="ViewFeed?feedUrl=@Url.Encode(channel.FeedUrl)">@Html.DisplayFor(item => channel.Title)</a><br />
}*@
<br />
@Html.ActionLink("Add Feed", "AddFeed")
<br />
<a href="#" onclick="updateFeeds()">Update Feeds</a>
</div>


<div id="feedItemHolder">
    <table id="feedItemsTable">
        <thead>
            <tr>
                <th>Feed</th>
                <th>Title</th>
                <th>Time</th>
            </tr>
        </thead>
        <tbody>
           @* @foreach (RssItem rssItem in (List<RssItem>)ViewData["items"])
            {
                <tr>
                    <td><a class="feedLink" href="ViewFeed?feedUrl=@Url.Encode(rssItem.Channel.FeedUrl)">@Html.DisplayFor(item => rssItem.Channel.Title)</a></td>
                    <td>@Html.DisplayFor(item => rssItem.Title)</td>
                    <td>@Html.DisplayFor(item => rssItem.PubDate)</td>
                </tr>
            } *@
        </tbody>
    </table>
    <!-- Modal -->
    <div id="myModal" class="modal fade" role="dialog">
        <div class="modal-dialog">
            <!-- Modal content-->
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal">&times;</button>
                    <h4 class="modal-title">Modal Header</h4>
                </div>
                <div class="modal-body">
                    <p>Some text in the modal.</p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
                </div>
            </div>

        </div>
    </div>
</div>
