//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34014
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace FeedReader.AccountService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Account", Namespace="http://schemas.datacontract.org/2004/07/FeedService.Model")]
    [System.SerializableAttribute()]
    public partial class Account : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int AccountIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string EmailField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FirstNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LastNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private FeedReader.AccountService.ServiceOption[] ServiceOptionsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TimeZoneCodeField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int AccountId {
            get {
                return this.AccountIdField;
            }
            set {
                if ((this.AccountIdField.Equals(value) != true)) {
                    this.AccountIdField = value;
                    this.RaisePropertyChanged("AccountId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Email {
            get {
                return this.EmailField;
            }
            set {
                if ((object.ReferenceEquals(this.EmailField, value) != true)) {
                    this.EmailField = value;
                    this.RaisePropertyChanged("Email");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FirstName {
            get {
                return this.FirstNameField;
            }
            set {
                if ((object.ReferenceEquals(this.FirstNameField, value) != true)) {
                    this.FirstNameField = value;
                    this.RaisePropertyChanged("FirstName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string LastName {
            get {
                return this.LastNameField;
            }
            set {
                if ((object.ReferenceEquals(this.LastNameField, value) != true)) {
                    this.LastNameField = value;
                    this.RaisePropertyChanged("LastName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public FeedReader.AccountService.ServiceOption[] ServiceOptions {
            get {
                return this.ServiceOptionsField;
            }
            set {
                if ((object.ReferenceEquals(this.ServiceOptionsField, value) != true)) {
                    this.ServiceOptionsField = value;
                    this.RaisePropertyChanged("ServiceOptions");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TimeZoneCode {
            get {
                return this.TimeZoneCodeField;
            }
            set {
                if ((object.ReferenceEquals(this.TimeZoneCodeField, value) != true)) {
                    this.TimeZoneCodeField = value;
                    this.RaisePropertyChanged("TimeZoneCode");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ServiceOption", Namespace="http://schemas.datacontract.org/2004/07/FeedService.Model")]
    [System.SerializableAttribute()]
    public partial class ServiceOption : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private FeedReader.AccountService.Account AccountField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int AccountIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool ActiveField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime EffectiveEndDateUtcField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime EffectiveStartDateUtcField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string OptionCodeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ServiceOptionIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public FeedReader.AccountService.Account Account {
            get {
                return this.AccountField;
            }
            set {
                if ((object.ReferenceEquals(this.AccountField, value) != true)) {
                    this.AccountField = value;
                    this.RaisePropertyChanged("Account");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int AccountId {
            get {
                return this.AccountIdField;
            }
            set {
                if ((this.AccountIdField.Equals(value) != true)) {
                    this.AccountIdField = value;
                    this.RaisePropertyChanged("AccountId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Active {
            get {
                return this.ActiveField;
            }
            set {
                if ((this.ActiveField.Equals(value) != true)) {
                    this.ActiveField = value;
                    this.RaisePropertyChanged("Active");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime EffectiveEndDateUtc {
            get {
                return this.EffectiveEndDateUtcField;
            }
            set {
                if ((this.EffectiveEndDateUtcField.Equals(value) != true)) {
                    this.EffectiveEndDateUtcField = value;
                    this.RaisePropertyChanged("EffectiveEndDateUtc");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime EffectiveStartDateUtc {
            get {
                return this.EffectiveStartDateUtcField;
            }
            set {
                if ((this.EffectiveStartDateUtcField.Equals(value) != true)) {
                    this.EffectiveStartDateUtcField = value;
                    this.RaisePropertyChanged("EffectiveStartDateUtc");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string OptionCode {
            get {
                return this.OptionCodeField;
            }
            set {
                if ((object.ReferenceEquals(this.OptionCodeField, value) != true)) {
                    this.OptionCodeField = value;
                    this.RaisePropertyChanged("OptionCode");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ServiceOptionId {
            get {
                return this.ServiceOptionIdField;
            }
            set {
                if ((this.ServiceOptionIdField.Equals(value) != true)) {
                    this.ServiceOptionIdField = value;
                    this.RaisePropertyChanged("ServiceOptionId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Result", Namespace="http://schemas.datacontract.org/2004/07/FeedService.Contract")]
    [System.SerializableAttribute()]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(FeedReader.AccountService.FindAccountResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(FeedReader.AccountService.AddOptionResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(FeedReader.AccountService.RegisterResult))]
    public partial class Result : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private FeedReader.AccountService.ResultCode CodeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MessageField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public FeedReader.AccountService.ResultCode Code {
            get {
                return this.CodeField;
            }
            set {
                if ((this.CodeField.Equals(value) != true)) {
                    this.CodeField = value;
                    this.RaisePropertyChanged("Code");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Message {
            get {
                return this.MessageField;
            }
            set {
                if ((object.ReferenceEquals(this.MessageField, value) != true)) {
                    this.MessageField = value;
                    this.RaisePropertyChanged("Message");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="FindAccountResult", Namespace="http://schemas.datacontract.org/2004/07/FeedService.Contract.AccountService")]
    [System.SerializableAttribute()]
    public partial class FindAccountResult : FeedReader.AccountService.Result {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private FeedReader.AccountService.Account AccountField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public FeedReader.AccountService.Account Account {
            get {
                return this.AccountField;
            }
            set {
                if ((object.ReferenceEquals(this.AccountField, value) != true)) {
                    this.AccountField = value;
                    this.RaisePropertyChanged("Account");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="AddOptionResult", Namespace="http://schemas.datacontract.org/2004/07/FeedService.Contract.AccountService")]
    [System.SerializableAttribute()]
    public partial class AddOptionResult : FeedReader.AccountService.Result {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RegisterResult", Namespace="http://schemas.datacontract.org/2004/07/FeedService.Contract.AccountService")]
    [System.SerializableAttribute()]
    public partial class RegisterResult : FeedReader.AccountService.Result {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int AccountIdField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int AccountId {
            get {
                return this.AccountIdField;
            }
            set {
                if ((this.AccountIdField.Equals(value) != true)) {
                    this.AccountIdField = value;
                    this.RaisePropertyChanged("AccountId");
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ResultCode", Namespace="http://schemas.datacontract.org/2004/07/FeedService.Contract")]
    public enum ResultCode : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Unknown = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Success = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Failure = 2,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="AccountService.IAccountService")]
    public interface IAccountService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAccountService/Register", ReplyAction="http://tempuri.org/IAccountService/RegisterResponse")]
        FeedReader.AccountService.RegisterResult Register(FeedReader.AccountService.Account newAccount);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAccountService/Register", ReplyAction="http://tempuri.org/IAccountService/RegisterResponse")]
        System.Threading.Tasks.Task<FeedReader.AccountService.RegisterResult> RegisterAsync(FeedReader.AccountService.Account newAccount);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAccountService/FindAccount", ReplyAction="http://tempuri.org/IAccountService/FindAccountResponse")]
        FeedReader.AccountService.FindAccountResult FindAccount(int accountId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAccountService/FindAccount", ReplyAction="http://tempuri.org/IAccountService/FindAccountResponse")]
        System.Threading.Tasks.Task<FeedReader.AccountService.FindAccountResult> FindAccountAsync(int accountId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAccountService/Deactivate", ReplyAction="http://tempuri.org/IAccountService/DeactivateResponse")]
        FeedReader.AccountService.Result Deactivate(int accountId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAccountService/Deactivate", ReplyAction="http://tempuri.org/IAccountService/DeactivateResponse")]
        System.Threading.Tasks.Task<FeedReader.AccountService.Result> DeactivateAsync(int accountId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAccountService/AddOption", ReplyAction="http://tempuri.org/IAccountService/AddOptionResponse")]
        FeedReader.AccountService.AddOptionResult AddOption(FeedReader.AccountService.ServiceOption option);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAccountService/AddOption", ReplyAction="http://tempuri.org/IAccountService/AddOptionResponse")]
        System.Threading.Tasks.Task<FeedReader.AccountService.AddOptionResult> AddOptionAsync(FeedReader.AccountService.ServiceOption option);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAccountService/RemoveOption", ReplyAction="http://tempuri.org/IAccountService/RemoveOptionResponse")]
        FeedReader.AccountService.Result RemoveOption(int serviceOptionId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAccountService/RemoveOption", ReplyAction="http://tempuri.org/IAccountService/RemoveOptionResponse")]
        System.Threading.Tasks.Task<FeedReader.AccountService.Result> RemoveOptionAsync(int serviceOptionId);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IAccountServiceChannel : FeedReader.AccountService.IAccountService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AccountServiceClient : System.ServiceModel.ClientBase<FeedReader.AccountService.IAccountService>, FeedReader.AccountService.IAccountService {
        
        public AccountServiceClient() {
        }
        
        public AccountServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public AccountServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public AccountServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public AccountServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public FeedReader.AccountService.RegisterResult Register(FeedReader.AccountService.Account newAccount) {
            return base.Channel.Register(newAccount);
        }
        
        public System.Threading.Tasks.Task<FeedReader.AccountService.RegisterResult> RegisterAsync(FeedReader.AccountService.Account newAccount) {
            return base.Channel.RegisterAsync(newAccount);
        }
        
        public FeedReader.AccountService.FindAccountResult FindAccount(int accountId) {
            return base.Channel.FindAccount(accountId);
        }
        
        public System.Threading.Tasks.Task<FeedReader.AccountService.FindAccountResult> FindAccountAsync(int accountId) {
            return base.Channel.FindAccountAsync(accountId);
        }
        
        public FeedReader.AccountService.Result Deactivate(int accountId) {
            return base.Channel.Deactivate(accountId);
        }
        
        public System.Threading.Tasks.Task<FeedReader.AccountService.Result> DeactivateAsync(int accountId) {
            return base.Channel.DeactivateAsync(accountId);
        }
        
        public FeedReader.AccountService.AddOptionResult AddOption(FeedReader.AccountService.ServiceOption option) {
            return base.Channel.AddOption(option);
        }
        
        public System.Threading.Tasks.Task<FeedReader.AccountService.AddOptionResult> AddOptionAsync(FeedReader.AccountService.ServiceOption option) {
            return base.Channel.AddOptionAsync(option);
        }
        
        public FeedReader.AccountService.Result RemoveOption(int serviceOptionId) {
            return base.Channel.RemoveOption(serviceOptionId);
        }
        
        public System.Threading.Tasks.Task<FeedReader.AccountService.Result> RemoveOptionAsync(int serviceOptionId) {
            return base.Channel.RemoveOptionAsync(serviceOptionId);
        }
    }
}
